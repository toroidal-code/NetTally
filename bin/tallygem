#!/usr/bin/env ruby
require 'bundler/setup'
require 'slop'
require 'TallyGem'

opts = Slop.parse do |o|
  o.banner = "usage: #{$PROGRAM_NAME} [options] <thread-url>"
  o.int '-s', '--start', 'the post number to start with'
  o.int '-e', '--end', 'the post number to end with'
  o.bool '-k', '--last-threadmark', 'auto-detect starting post based on last threadmark (default: true)', default: true
  o.string '-f', '--format', 'Printer to use (bbcode (default), plain)', default: 'bbcode'
  o.string '-p', '--partition', 'Strategy used for partitioning the vote (block (default), line, recursive)', default:'block'
  o.on '-v', '--version', 'print the version' do
    puts TallyGem::VERSION
    exit
  end
  o.on '-h', '--help' do
    puts o
    exit
  end
end

if opts.args.empty?
  puts opts
  exit(-1)
end

adapter = begin
  hash_opts = opts.to_hash
  o = {}
  o[:start_num] = hash_opts[:start] if hash_opts.key?(:start) && !hash_opts[:start].nil?
  o[:end_num] = hash_opts[:end] if hash_opts.key?(:end) && !hash_opts[:end].nil?
  o[:last_threadmark] = hash_opts[:last_threadmark] if hash_opts.key? :last_threadmark
  TallyGem::Adapters::Xenforo.new(opts.args.first,o)
end

partition_strategy =
  case opts[:partition].downcase
  when 'block'
    TallyGem::SplitBy::Block
  when 'line'
    TallyGem::SplitBy::Line
  when 'retursive'
    TallyGem::SplitBy::Recursive
  else
    raise ArgumentError, "Invalid vote partition strategy '#{opts[:partition]}'."
  end

printer =
  case opts[:format].downcase
  when 'bbcode'
    TallyGem::Printers::BBCode
  when 'plain'
    TallyGem::Printers::Plain
  else
    raise ArgumentError, "Invalid output format '#{opts[:format]}'."
  end

tally = TallyGem::Tally.new(adapter, partition_strategy)
tally.run
puts printer.render(tally)
